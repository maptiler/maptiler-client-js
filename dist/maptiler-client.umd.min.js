(function(f,N){typeof exports=="object"&&typeof module<"u"?N(exports):typeof define=="function"&&define.amd?define(["exports"],N):(f=typeof globalThis<"u"?globalThis:f||self,N(f.maptilerclient={}))})(this,function(f){"use strict";function N(){return typeof self<"u"?fetch.bind(self):typeof global<"u"&&global.fetch?global.fetch:null}class U{constructor(){this._apiKey="Not defined yet.",this._fetch=N()}set apiKey(n){this._apiKey=n}get apiKey(){return this._apiKey}set fetch(n){this._fetch=n}get fetch(){return this._fetch}}const A=new U,k={AUTO:"auto",ALBANIAN:"sq",ARABIC:"ar",ARMENIAN:"hy",AZERBAIJANI:"az",BELORUSSIAN:"be",BOSNIAN:"bs",BRETON:"br",BULGARIAN:"bg",CATALAN:"ca",CHINESE:"zh",CROATIAN:"hr",CZECH:"cs",DANISH:"da",DUTCH:"nl",ENGLISH:"en",ESPERANTO:"eo",ESTONIAN:"et",FINNISH:"fi",FRENCH:"fr",FRISIAN:"fy",GEORGIAN:"ka",GERMAN:"de",GREEK:"el",HEBREW:"he",HUNGARIAN:"hu",ICELANDIC:"is",IRISH:"ga",ITALIAN:"it",JAPANESE:"ja",KANNADA:"kn",KAZAKH:"kk",KOREAN:"ko",ROMAN_LATIN:"la",LATVIAN:"lv",LITHUANIAN:"lt",LUXEMBOURGISH:"lb",MACEDONIAN:"mk",MALTESE:"mt",NORWEGIAN:"no",POLISH:"pl",PORTUGUESE:"pt",ROMANIAN:"ro",ROMANSH:"rm",RUSSIAN:"ru",SCOTTISH_GAELIC:"gd",SERBIAN_CYRILLIC:"sr",SLOVAK:"sk",SLOVENE:"sl",SPANISH:"es",SWEDISH:"sv",THAI:"th",TURKISH:"tr",UKRAINIAN:"uk",WELSH:"cy"},T=new Set(Object.values(k));function C(){if(typeof navigator>"u")return Intl.DateTimeFormat().resolvedOptions().locale.split("-")[0];const e=Array.from(new Set(navigator.languages.map(n=>n.split("-")[0]))).filter(n=>T.has(n));return e.length?e[0]:k.ENGLISH}var H=(e,n,t)=>new Promise((o,r)=>{var l=i=>{try{s(t.next(i))}catch(c){r(c)}},a=i=>{try{s(t.throw(i))}catch(c){r(c)}},s=i=>i.done?o(i.value):Promise.resolve(i.value).then(l,a);s((t=t.apply(e,n)).next())});function P(e){return H(this,arguments,function*(n,t={}){if(A.fetch===null)throw new Error("The fetch function was not found. If on NodeJS < 18 please specify the fetch function with config.fetch");return A.fetch(n,t)})}const d={maptilerApiURL:"https://api.maptiler.com/",mapStyle:"streets-v2"};Object.freeze(d);class I extends Error{constructor(n,t=""){super(`Call to enpoint ${n.url} failed with the status code ${n.status}. ${t}`),this.res=n}}var K=(e,n,t)=>new Promise((o,r)=>{var l=i=>{try{s(t.next(i))}catch(c){r(c)}},a=i=>{try{s(t.throw(i))}catch(c){r(c)}},s=i=>i.done?o(i.value):Promise.resolve(i.value).then(l,a);s((t=t.apply(e,n)).next())});const $={400:"Query too long / Invalid parameters",403:"Key is missing, invalid or restricted"};function D(e){return K(this,arguments,function*(n,t={}){var o;const r=new URL(`geocoding/${encodeURIComponent(n)}.json`,d.maptilerApiURL);if(r.searchParams.set("key",(o=t.apiKey)!=null?o:A.apiKey),"bbox"in t){const s=Array.isArray(t.bbox)?{southWest:{lng:t.bbox[0],lat:t.bbox[1]},northEast:{lng:t.bbox[2],lat:t.bbox[3]}}:t.bbox;r.searchParams.set("bbox",[s.southWest.lng,s.southWest.lat,s.northEast.lng,s.northEast.lat].join(","))}if("proximity"in t&&r.searchParams.set("proximity",[t.proximity.lng,t.proximity.lat].join(",")),"language"in t){const s=Array.from(new Set((Array.isArray(t.language)?t.language:[t.language]).map(i=>i===k.AUTO?C():i))).join(",");r.searchParams.set("language",s)}const l=r.toString(),a=yield P(l);if(!a.ok)throw new I(a,a.status in $?$[a.status]:"");return yield a.json()})}function W(e){return K(this,arguments,function*(n,t={}){var o;const r=new URL(`geocoding/${n.lng},${n.lat}.json`,d.maptilerApiURL);if(r.searchParams.set("key",(o=t.apiKey)!=null?o:A.apiKey),"language"in t){const s=Array.from(new Set((Array.isArray(t.language)?t.language:[t.language]).map(i=>i===k.AUTO?C():i))).join(",");r.searchParams.set("language",s)}const l=r.toString(),a=yield P(l);if(!a.ok)throw new I(a,a.status in $?$[a.status]:"");return yield a.json()})}const G={forward:D,reverse:W,language:k};var _=(e,n,t)=>new Promise((o,r)=>{var l=i=>{try{s(t.next(i))}catch(c){r(c)}},a=i=>{try{s(t.throw(i))}catch(c){r(c)}},s=i=>i.done?o(i.value):Promise.resolve(i.value).then(l,a);s((t=t.apply(e,n)).next())});const j={403:"Key is missing, invalid or restricted"};function M(){return _(this,arguments,function*(e={}){var n;const t=new URL("geolocation/ip.json",d.maptilerApiURL);t.searchParams.set("key",(n=e.apiKey)!=null?n:A.apiKey);const o=t.toString(),r=yield P(o);if(!r.ok)throw new I(r,r.status in j?j[r.status]:"");return yield r.json()})}const B={info:M};var x=(e,n,t)=>new Promise((o,r)=>{var l=i=>{try{s(t.next(i))}catch(c){r(c)}},a=i=>{try{s(t.throw(i))}catch(c){r(c)}},s=i=>i.done?o(i.value):Promise.resolve(i.value).then(l,a);s((t=t.apply(e,n)).next())});const w={403:"Key is missing, invalid or restricted"};function F(e){return x(this,arguments,function*(n,t={}){var o;const r=new URL(`coordinates/search/${n}.json`,d.maptilerApiURL);r.searchParams.set("key",(o=t.apiKey)!=null?o:A.apiKey),"limit"in t&&r.searchParams.set("limit",t.limit.toString()),"transformations"in t&&r.searchParams.set("transformations",t.transformations.toString()),"exports"in t&&r.searchParams.set("exports",t.exports.toString());const l=r.toString(),a=yield P(l);if(!a.ok)throw new I(a,a.status in w?w[a.status]:"");return yield a.json()})}function z(e){return x(this,arguments,function*(n,t={}){var o;const r=(Array.isArray(n)?n:[n]).map(i=>`${i.lng},${i.lat}`).join(";"),l=new URL(`coordinates/transform/${r}.json`,d.maptilerApiURL);l.searchParams.set("key",(o=t.apiKey)!=null?o:A.apiKey),"sourceCrs"in t&&l.searchParams.set("s_srs",t.sourceCrs.toString()),"targetCrs"in t&&l.searchParams.set("t_srs",t.targetCrs.toString()),"operations"in t&&l.searchParams.set("ops",(Array.isArray(t.operations)?t.operations:[t.operations]).join("|"));const a=l.toString(),s=yield P(a);if(!s.ok)throw new I(s,s.status in w?w[s.status]:"");return yield s.json()})}const J={search:F,transform:z};var V=(e,n,t)=>new Promise((o,r)=>{var l=i=>{try{s(t.next(i))}catch(c){r(c)}},a=i=>{try{s(t.throw(i))}catch(c){r(c)}},s=i=>i.done?o(i.value):Promise.resolve(i.value).then(l,a);s((t=t.apply(e,n)).next())});const O={403:"Key is missing, invalid or restricted"};function Z(e){return V(this,arguments,function*(n,t={}){var o;const r=new URL(`data/${encodeURIComponent(n)}/features.json`,d.maptilerApiURL);r.searchParams.set("key",(o=t.apiKey)!=null?o:A.apiKey);const l=r.toString(),a=yield P(l);if(!a.ok)throw new I(a,a.status in O?O[a.status]:"");return yield a.json()})}const q={get:Z};function Q(e,n,t){let o=n[0],r=n[1],l=t[0]-o,a=t[1]-r;if(l!==0||a!==0){const s=((e[0]-o)*l+(e[1]-r)*a)/(l*l+a*a);s>1?(o=t[0],r=t[1]):s>0&&(o+=l*s,r+=a*s)}return l=e[0]-o,a=e[1]-r,l*l+a*a}function R(e,n,t,o,r){let l=o,a;for(let s=n+1;s<t;s++){const i=Q(e[s],e[n],e[t]);i>l&&(a=s,l=i)}l>o&&(a-n>1&&R(e,n,a,o,r),r.push(e[a]),t-a>1&&R(e,a,t,o,r))}function X(e,n){const t=e.length-1,o=[e[0]];return R(e,0,t,n,o),o.push(e[t]),o}function Y(e,n){if(e.length<=2)return e;const t=n!==void 0?n*n:1;return X(e,t)}function v(e,n=!0){let t=`${e.lng},${e.lat}`;return e.color&&n&&(t+=`,${e.color}`),t}function E(e,n=3e3){let t=e.map(l=>l.join(",")).join("|"),o=5e-6;const r=1e-5;for(;t.length>n;)t=Y(e,o).map(l=>`${l[0]},${l[1]}`).join("|"),o+=r;return t}function tt(e,n,t={}){var o,r,l,a,s,i;const c=(o=t.style)!=null?o:d.mapStyle,S=t.hiDPI?"@2x":"",y=(r=t.format)!=null?r:"png";let g=~~((l=t.width)!=null?l:1024),u=~~((a=t.height)!=null?a:1024);t.hiDPI&&(g=~~(g/2),u=~~(u/2));const m=new URL(`maps/${encodeURIComponent(c)}/static/${e.lng},${e.lat},${n}/${g}x${u}${S}.${y}`,d.maptilerApiURL);if("attribution"in t&&m.searchParams.set("attribution",t.attribution.toString()),"marker"in t){let h="";const p="markerIcon"in t;p&&(h+=`icon:${t.markerIcon}|`),p&&"markerAnchor"in t&&(h+=`anchor:${t.markerAnchor}|`),p&&t.hiDPI&&(h+="scale:2|");const b=Array.isArray(t.marker)?t.marker:[t.marker];h+=b.map(L=>v(L,!p)).join("|"),m.searchParams.set("markers",h)}if("path"in t){let h="";if(h+=`fill:${(s=t.pathFillColor)!=null?s:"none"}|`,"pathStrokeColor"in t&&(h+=`stroke:${t.pathStrokeColor}|`),"pathWidth"in t){const p=t.pathWidth/(t.hiDPI?2:1);h+=`width:${p.toString()}|`}h+=E(t.path),m.searchParams.set("path",h)}return m.searchParams.set("key",(i=t.apiKey)!=null?i:A.apiKey),m.toString()}function et(e,n={}){var t,o,r,l,a,s;const i=(t=n.style)!=null?t:d.mapStyle,c=n.hiDPI?"@2x":"",S=(o=n.format)!=null?o:"png";let y=~~((r=n.width)!=null?r:1024),g=~~((l=n.height)!=null?l:1024);n.hiDPI&&(y=~~(y/2),g=~~(g/2));const u=Array.isArray(e)?{southWest:{lng:e[0],lat:e[1]},northEast:{lng:e[2],lat:e[3]}}:e,m=new URL(`maps/${encodeURIComponent(i)}/static/${u.southWest.lng},${u.southWest.lat},${u.northEast.lng},${u.northEast.lat}/${y}x${g}${c}.${S}`,d.maptilerApiURL);if("attribution"in n&&m.searchParams.set("attribution",n.attribution.toString()),"padding"in n&&m.searchParams.set("padding",n.padding.toString()),"marker"in n){let h="";const p="markerIcon"in n;p&&(h+=`icon:${n.markerIcon}|`),p&&"markerAnchor"in n&&(h+=`anchor:${n.markerAnchor}|`),p&&n.hiDPI&&(h+="scale:2|");const b=Array.isArray(n.marker)?n.marker:[n.marker];h+=b.map(L=>v(L,!p)).join("|"),m.searchParams.set("markers",h)}if("path"in n){let h="";if(h+=`fill:${(a=n.pathFillColor)!=null?a:"none"}|`,"pathStrokeColor"in n&&(h+=`stroke:${n.pathStrokeColor}|`),"pathWidth"in n){const p=n.pathWidth/(n.hiDPI?2:1);h+=`width:${p.toString()}|`}h+=E(n.path),m.searchParams.set("path",h)}return m.searchParams.set("key",(s=n.apiKey)!=null?s:A.apiKey),m.toString()}function nt(e={}){var n,t,o,r,l,a;if(!("marker"in e)&&!("path"in e))throw new Error("Automatic static maps require markers and/or path to be created.");const s=(n=e.style)!=null?n:d.mapStyle,i=e.hiDPI?"@2x":"",c=(t=e.format)!=null?t:"png";let S=~~((o=e.width)!=null?o:1024),y=~~((r=e.height)!=null?r:1024);e.hiDPI&&(S=~~(S/2),y=~~(y/2));const g=new URL(`maps/${encodeURIComponent(s)}/static/auto/${S}x${y}${i}.${c}`,d.maptilerApiURL);if("attribution"in e&&g.searchParams.set("attribution",e.attribution.toString()),"padding"in e&&g.searchParams.set("padding",e.padding.toString()),"marker"in e){let u="";const m="markerIcon"in e;m&&(u+=`icon:${e.markerIcon}|`),m&&"markerAnchor"in e&&(u+=`anchor:${e.markerAnchor}|`),m&&e.hiDPI&&(u+="scale:2|");const h=Array.isArray(e.marker)?e.marker:[e.marker];u+=h.map(p=>v(p,!m)).join("|"),g.searchParams.set("markers",u)}if("path"in e){let u="";if(u+=`fill:${(l=e.pathFillColor)!=null?l:"none"}|`,"pathStrokeColor"in e&&(u+=`stroke:${e.pathStrokeColor}|`),"pathWidth"in e){const m=e.pathWidth/(e.hiDPI?2:1);u+=`width:${m.toString()}|`}u+=E(e.path),g.searchParams.set("path",u)}return g.searchParams.set("key",(a=e.apiKey)!=null?a:A.apiKey),g.toString()}const rt={centered:tt,bounded:et,automatic:nt};f.ClientConfig=U,f.LanguageGeocoding=k,f.ServiceError=I,f.config=A,f.coordinates=J,f.data=q,f.geocoding=G,f.geolocation=B,f.staticMaps=rt,Object.defineProperty(f,"__esModule",{value:!0})});
