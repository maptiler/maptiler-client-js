{"version":3,"file":"maptiler-client.mjs","sources":["../src/config.ts","../src/language.ts","../src/callFetch.ts","../src/defaults.ts","../src/services/ServiceError.ts","../src/services/geocoding.ts","../src/services/geolocation.ts","../src/services/coordinates.ts","../src/services/data.ts","../src/mapstyle.ts","../src/services/simplify.ts","../src/services/staticMaps.ts","../src/geometry/util.ts","../src/geometry/area.ts","../src/geometry/distance.ts","../src/demProfiler/tileCover.ts","../src/demProfiler/getElevation.ts","../src/demProfiler/index.ts"],"sourcesContent":["export type FetchFunction = (url: string, options: object) => Promise<any>;\n\nfunction tryGettingFetch() {\n  // this is browser, fetch exists\n  if (typeof self !== \"undefined\") {\n    return fetch.bind(self);\n  }\n\n  if (typeof global !== \"undefined\" && global.fetch) {\n    return global.fetch;\n  }\n\n  return null;\n}\n\n/**\n * The configuration object definition\n */\nclass ClientConfig {\n  /**\n   * MapTiler Cloud API key\n   */\n  private _apiKey = \"\";\n\n  /**\n   * The fetch function. To be set if in Node < 18, otherwise\n   * will be automatically resolved.\n   */\n  private _fetch: FetchFunction | null = tryGettingFetch();\n\n  /**\n   * Set the MapTiler Cloud API key\n   */\n  set apiKey(k: string) {\n    this._apiKey = k;\n  }\n\n  /**\n   * Get the MapTiler Cloud API key\n   */\n  get apiKey(): string {\n    return this._apiKey;\n  }\n\n  /**\n   * Set a the custom fetch function to replace the default one\n   */\n  set fetch(f: FetchFunction) {\n    this._fetch = f;\n  }\n\n  /**\n   * Get the fetch fucntion\n   */\n  get fetch(): FetchFunction | null {\n    return this._fetch;\n  }\n}\n\n/**\n * Configuration object\n */\nconst config = new ClientConfig();\n\nexport { ClientConfig, config };\n","/**\n * Languages. Note that not all the languages of this list are available but the compatibility list may be expanded in the future.\n */\nconst LanguageGeocoding = {\n  AUTO: \"auto\",\n  ALBANIAN: \"sq\",\n  ARABIC: \"ar\",\n  ARMENIAN: \"hy\",\n  AZERBAIJANI: \"az\",\n  BELORUSSIAN: \"be\",\n  BOSNIAN: \"bs\",\n  BRETON: \"br\",\n  BULGARIAN: \"bg\",\n  CATALAN: \"ca\",\n  CHINESE: \"zh\",\n  CROATIAN: \"hr\",\n  CZECH: \"cs\",\n  DANISH: \"da\",\n  DUTCH: \"nl\",\n  ENGLISH: \"en\",\n  ESPERANTO: \"eo\",\n  ESTONIAN: \"et\",\n  FINNISH: \"fi\",\n  FRENCH: \"fr\",\n  FRISIAN: \"fy\",\n  GEORGIAN: \"ka\",\n  GERMAN: \"de\",\n  GREEK: \"el\",\n  HEBREW: \"he\",\n  HUNGARIAN: \"hu\",\n  ICELANDIC: \"is\",\n  IRISH: \"ga\",\n  ITALIAN: \"it\",\n  JAPANESE: \"ja\",\n  KANNADA: \"kn\",\n  KAZAKH: \"kk\",\n  KOREAN: \"ko\",\n  ROMAN_LATIN: \"la\",\n  LATVIAN: \"lv\",\n  LITHUANIAN: \"lt\",\n  LUXEMBOURGISH: \"lb\",\n  MACEDONIAN: \"mk\",\n  MALTESE: \"mt\",\n  NORWEGIAN: \"no\",\n  POLISH: \"pl\",\n  PORTUGUESE: \"pt\",\n  ROMANIAN: \"ro\",\n  ROMANSH: \"rm\",\n  RUSSIAN: \"ru\",\n  SCOTTISH_GAELIC: \"gd\",\n  SERBIAN_CYRILLIC: \"sr\",\n  SLOVAK: \"sk\",\n  SLOVENE: \"sl\",\n  SPANISH: \"es\",\n  SWEDISH: \"sv\",\n  THAI: \"th\",\n  TURKISH: \"tr\",\n  UKRAINIAN: \"uk\",\n  WELSH: \"cy\",\n};\n\nconst languageCodeSet = new Set(Object.values(LanguageGeocoding));\n\ntype Values<T> = T[keyof T];\n\n/**\n * Built-in languages values as strings\n */\ntype LanguageGeocodingString = Values<typeof LanguageGeocoding>;\n\nfunction getAutoLanguageGeocoding(): LanguageGeocodingString {\n  if (typeof navigator === \"undefined\") {\n    return Intl.DateTimeFormat()\n      .resolvedOptions()\n      .locale.split(\"-\")[0] as LanguageGeocodingString;\n  }\n\n  const canditatelangs = Array.from(\n    new Set(navigator.languages.map((l) => l.split(\"-\")[0]))\n  ).filter((l) => languageCodeSet.has(l as LanguageGeocodingString));\n\n  return canditatelangs.length\n    ? (canditatelangs[0] as LanguageGeocodingString)\n    : LanguageGeocoding.ENGLISH;\n}\n\nexport { LanguageGeocoding, LanguageGeocodingString, getAutoLanguageGeocoding };\n","import { config } from \"./config\";\n\nexport async function callFetch(resource, options = {}) {\n  if (config.fetch === null) {\n    throw new Error(\n      \"The fetch function was not found. If on NodeJS < 18 please specify the fetch function with config.fetch\"\n    );\n  }\n\n  //  Control if URL contains the api key\n  if (new URL(resource).searchParams.get(\"key\").trim() === \"\") {\n    throw new Error(\n      \"The MapTiler Cloud API key is missing. Set it in `config.apiKey` or get one for free at https://maptiler.com\"\n    );\n  }\n\n  return config.fetch(resource, options);\n}\n","/**\n * Some default settings for the SDK\n */\nconst defaults = {\n  maptilerApiURL: \"https://api.maptiler.com/\",\n  mapStyle: \"streets-v2\",\n};\n\nObject.freeze(defaults);\n\nexport { defaults };\n","/**\n * A ServiceError is an Error that includes the HTTP response details\n */\nexport class ServiceError extends Error {\n  constructor(public res: Response, customMessage = \"\") {\n    super(\n      `Call to enpoint ${res.url} failed with the status code ${res.status}. ${customMessage}`\n    );\n  }\n}\n","import { BBox, Feature, Geometry, Position } from \"geojson\";\nimport { callFetch } from \"../callFetch\";\nimport { config } from \"../config\";\nimport { defaults } from \"../defaults\";\n\nimport {\n  getAutoLanguageGeocoding,\n  LanguageGeocoding,\n  LanguageGeocodingString,\n} from \"../language\";\nimport { ServiceError } from \"./ServiceError\";\n\nconst customMessages = {\n  400: \"Query too long / Invalid parameters\",\n  403: \"Key is missing, invalid or restricted\",\n};\n\nexport type LanguageGeocodingOptions = {\n  /**\n   * Prefer results in specific language. Itâ€™s possible to specify multiple values.\n   */\n  language?: LanguageGeocodingString | Array<LanguageGeocodingString>;\n};\n\nexport type CommonForwardAndReverseGeocodingOptions =\n  LanguageGeocodingOptions & {\n    /**\n     * Custom MapTiler Cloud API key to use instead of the one in global `config`\n     */\n    apiKey?: string;\n\n    /**\n     * Maximum number of results to show. Must be between 1 and 10. Default is 5 for forward and 1 for reverse geocoding.\n     */\n    limit?: number;\n\n    /**\n     * Filter of feature types to return. If not specified, all available feature types are returned.\n     */\n    types?: (\n      | \"country\"\n      | \"region\"\n      | \"subregion\"\n      | \"county\"\n      | \"joint_municipality\"\n      | \"joint_submunicipality\"\n      | \"municipality\"\n      | \"municipal_district\"\n      | \"locality\"\n      | \"neighbourhood\"\n      | \"place\"\n      | \"postal_code\"\n      | \"address\"\n      | \"poi\"\n    )[];\n  };\n\nexport type GeocodingOptions = CommonForwardAndReverseGeocodingOptions & {\n  /**\n   * Only search for results in the specified area.\n   */\n  bbox?: BBox;\n\n  /**\n   * Prefer results close to a specific location.\n   */\n  proximity?: Position;\n\n  /**\n   * Limit search to specific country/countries specified as list of Alpha-2 ISO 3166-1 codes.\n   */\n  country?: string[];\n\n  /**\n   * Set to `false` to disable fuzzy (typo-tolerant) search. Default is `true`.\n   */\n  fuzzyMatch?: boolean;\n\n  /**\n   * Set to `true` to use autocomplete, `false` to disable it.\n   * Default (`undefined`) is to combine autocomplete with non-autocomplete results.\n   */\n  autocomplete?: boolean;\n};\n\nexport type ReverseGeocodingOptions = CommonForwardAndReverseGeocodingOptions;\n\nexport type ByIdGeocodingOptions = LanguageGeocodingOptions;\n\nexport type Coordinates = Position;\n\ntype FeatureProperties = {\n  /**\n   * External reference of the feature used for debugging purposes\n   */\n  ref: string;\n\n  /**\n   * ISO 3166-1 alpha-2 country code of the feature\n   */\n  country_code: string;\n\n  /**\n   * (experimental) Kind of the feature\n   */\n  kind?:\n    | \"road\"\n    | \"road_relation\"\n    | \"admin_area\"\n    | \"place\"\n    | \"street\"\n    | \"virtual_street\";\n\n  /**\n   * (experimental) Value of place=* tag from OpenStreetMap feature if kind=place\n   */\n  \"osm:place_type\"?: string;\n\n  /**\n   * (experimental) Feature tags from OpenStreetMap. Only available for `poi` type.\n   */\n  \"osm:tags\"?: Record<string, string>;\n\n  /**\n   * Array of POI categories. Only available for `poi` type.\n   */\n  categories?: string[];\n};\n\ntype FeatureBase = {\n  /**\n   * Unique feature ID\n   */\n  id: string;\n\n  /**\n   * Localized feature name\n   */\n  text: string;\n\n  /**\n   * Query's primary ISO 639-1 language code\n   */\n  language?: string;\n\n  /**\n   * A string analogous to the `text` field that matches the query in the requested language.\n   * This field is only returned when multiple languages are requested using the `language` parameter, and will be present for each requested language.\n   */\n  [text: `text_${string}`]: string;\n\n  /**\n   * A ISO 639-1 query's fallback language code.\n   * This field is only returned when multiple languages are requested using the `language` parameter, and will be present for each requested language.\n   */\n  [language: `language_${string}`]: string;\n};\n\nexport type FeatureHierarchy = FeatureProperties & FeatureBase;\n\nexport type GeocodingFeature = Feature<Geometry, FeatureProperties> &\n  FeatureBase & {\n    /**\n     * Bounding box of the original feature as [w, s, e, n] array\n     */\n    bbox: BBox;\n\n    /**\n     * A [lon, lat] array of the original feature centeroid\n     */\n    center: Coordinates;\n\n    /**\n     * Formatted (including the hierarchy) and localized feature full name\n     */\n    place_name: string;\n\n    /**\n     * A string analogous to the `place_name` field that matches the query in the requested language.\n     * This field is only returned when multiple languages are requested using the `language` parameter, and will be present for each requested language.\n     */\n    [key: `place_name_${string}`]: string;\n\n    /**\n     * An array of feature types describing the feature.\n     * Currently each feature has only single type but this may change in the future.\n     */\n    place_type: string[];\n\n    /**\n     * Localized type of the place name, matches `place_type` property\n     */\n    place_type_name: string[];\n\n    /**\n     * Feature hierarchy\n     */\n    context?: Array<FeatureHierarchy>;\n\n    /**\n     * Address number, if applicable\n     */\n    address?: string;\n\n    /**\n     * Indicates how well the returned feature matches the user's query on a scale from 0 to 1.\n     * 0 means the result does not match the query text at all, while 1 means the result fully matches the query text.\n     * You can use the relevance property to remove results that don't fully match the query.\n     */\n    relevance: number;\n  };\n\nexport type GeocodingSearchResult = {\n  type: \"FeatureCollection\";\n\n  /**\n   * Array of features found\n   */\n  features: Array<GeocodingFeature>;\n\n  /**\n   * Tokenized search query\n   */\n  query: Array<string>;\n\n  /**\n   * Attribution of the result\n   */\n  attribution: string;\n};\n\nfunction addLanguageGeocodingOptions(\n  searchParams: URLSearchParams,\n  options: LanguageGeocodingOptions\n) {\n  if (options.language == undefined) {\n    return;\n  }\n\n  const languages = Array.from(\n    new Set(\n      (Array.isArray(options.language)\n        ? options.language\n        : [options.language]\n      ).map((lang) =>\n        lang === LanguageGeocoding.AUTO ? getAutoLanguageGeocoding() : lang\n      )\n    )\n  ).join(\",\");\n\n  searchParams.set(\"language\", languages);\n}\n\nfunction addCommonForwardAndReverseGeocodingOptions(\n  searchParams: URLSearchParams,\n  options: CommonForwardAndReverseGeocodingOptions\n) {\n  searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n\n  if (options.limit != undefined) {\n    searchParams.set(\"limit\", String(options.limit));\n  }\n\n  if (options.types != undefined) {\n    searchParams.set(\"types\", options.types.join(\",\"));\n  }\n\n  addLanguageGeocodingOptions(searchParams, options);\n}\n\nfunction addForwardGeocodingOptions(\n  searchParams: URLSearchParams,\n  options: GeocodingOptions\n) {\n  addCommonForwardAndReverseGeocodingOptions(searchParams, options);\n\n  if (options.bbox != undefined) {\n    searchParams.set(\"bbox\", options.bbox.join(\",\"));\n  }\n\n  if (options.proximity != undefined) {\n    searchParams.set(\"proximity\", options.proximity.join(\",\"));\n  }\n\n  if (options.country != undefined) {\n    searchParams.set(\"country\", options.country.join(\",\"));\n  }\n\n  if (options.fuzzyMatch != undefined) {\n    searchParams.set(\"fuzzyMatch\", options.fuzzyMatch ? \"true\" : \"false\");\n  }\n\n  if (options.autocomplete != undefined) {\n    searchParams.set(\"autocomplete\", options.autocomplete ? \"true\" : \"false\");\n  }\n}\n\n/**\n * Performs a forward geocoding query to MapTiler API.\n * Providing a human readable place name (of a city, country, street, etc.), the function returns\n * a list of candidate locations including longitude and latitude.\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/geocoding/#search-by-name-forward\n * @param query\n * @param options\n * @returns\n */\nasync function forward(\n  query: string,\n  options: GeocodingOptions = {}\n): Promise<GeocodingSearchResult> {\n  if (typeof query !== \"string\" || query.trim().length === 0) {\n    throw new Error(\"The query must be a non-empty string\");\n  }\n\n  const endpoint = new URL(\n    `geocoding/${encodeURIComponent(query)}.json`,\n    defaults.maptilerApiURL\n  );\n\n  const { searchParams } = endpoint;\n\n  addForwardGeocodingOptions(searchParams, options);\n\n  const urlWithParams = endpoint.toString();\n\n  const res = await callFetch(urlWithParams);\n\n  if (!res.ok) {\n    throw new ServiceError(res, customMessages[res.status] ?? \"\");\n  }\n\n  const obj: GeocodingSearchResult = await res.json();\n\n  return obj;\n}\n\n/**\n * Perform a reverse geocoding query to MapTiler API.\n * Providing a longitude and latitude, this function returns a set of human readable information about this place (country, city, street, etc.)\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/geocoding/#search-by-coordinates-reverse\n * @param position\n * @param options\n * @returns\n */\nasync function reverse(\n  position: Position,\n  options: ReverseGeocodingOptions = {}\n): Promise<GeocodingSearchResult> {\n  if (!Array.isArray(position) || position.length < 2) {\n    throw new Error(\"The position must be an array of form [lng, lat].\");\n  }\n\n  const endpoint = new URL(\n    `geocoding/${position[0]},${position[1]}.json`,\n    defaults.maptilerApiURL\n  );\n\n  addCommonForwardAndReverseGeocodingOptions(endpoint.searchParams, options);\n\n  const urlWithParams = endpoint.toString();\n\n  const res = await callFetch(urlWithParams);\n\n  if (!res.ok) {\n    throw new ServiceError(res, customMessages[res.status] ?? \"\");\n  }\n\n  const obj: GeocodingSearchResult = await res.json();\n\n  return obj;\n}\n\n/**\n * Perform a geocoding query to MapTiler API to obtain fature by its ID.\n * Providing a feature ID, this function returns a feature which includes its full geometry.\n * Note that the feature ID is not stable and it changes when the database is re-indexed.\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/geocoding/#search-by-feature-id\n * @param id\n * @param options\n * @returns\n */\nasync function byId(\n  id: string,\n  options: ByIdGeocodingOptions = {}\n): Promise<GeocodingSearchResult> {\n  const endpoint = new URL(`geocoding/${id}.json`, defaults.maptilerApiURL);\n\n  addLanguageGeocodingOptions(endpoint.searchParams, options);\n\n  const urlWithParams = endpoint.toString();\n\n  const res = await callFetch(urlWithParams);\n\n  if (!res.ok) {\n    throw new ServiceError(res, customMessages[res.status] ?? \"\");\n  }\n\n  const obj: GeocodingSearchResult = await res.json();\n\n  return obj;\n}\n\n/**\n * Perform a batch geocoding query to MapTiler API.\n * Provide multiple queries in the array. Each query can be forward, reverse or by feature ID.\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/geocoding/#batch-geocoding\n * @param queries\n * @param options\n * @returns\n */\nasync function batch(\n  queries: string[],\n  options: GeocodingOptions = {}\n): Promise<GeocodingSearchResult[]> {\n  if (!queries.length) {\n    return [];\n  }\n\n  const joinedQuery = queries\n    .map((query) => encodeURIComponent(query))\n    .join(\";\");\n\n  const endpoint = new URL(\n    `geocoding/${joinedQuery}.json`,\n    defaults.maptilerApiURL\n  );\n\n  const { searchParams } = endpoint;\n\n  addForwardGeocodingOptions(searchParams, options);\n\n  const urlWithParams = endpoint.toString();\n\n  const res = await callFetch(urlWithParams);\n\n  if (!res.ok) {\n    throw new ServiceError(res, customMessages[res.status] ?? \"\");\n  }\n\n  const obj = await res.json();\n\n  return queries.length === 1 ? [obj] : obj;\n}\n\n/**\n * The **geocoding** namespace contains asynchronous functions to call the [MapTiler Geocoding API](https://docs.maptiler.com/cloud/api/geocoding/).\n * The **Geocoding API** provides ways to get geographic coordinates from a human-readable search query of a place (forward geocoding)\n * and to get the location details (country, city, street, etc.) from a geographic coordinate (reverse geocoding);\n */\nconst geocoding = {\n  forward,\n  reverse,\n  byId,\n  batch,\n  language: LanguageGeocoding,\n};\n\nexport { geocoding };\n","import { BBox } from \"geojson\";\nimport { callFetch } from \"../callFetch\";\nimport { config } from \"../config\";\nimport { defaults } from \"../defaults\";\nimport { ServiceError } from \"./ServiceError\";\n\nconst customMessages = {\n  403: \"Key is missing, invalid or restricted\",\n};\n\n/**\n * Options that can be provided to get user data.\n */\nexport type GeolocationInfoOptions = {\n  /**\n   * Custom MapTiler Cloud API key to use instead of the one in global `config`\n   */\n  apiKey?: string;\n};\n\nexport type GeolocationResult = {\n  /**\n   * Name of the country\n   * Example: Switzerland\n   */\n  country?: string;\n\n  /**\n   * Two-letter code of the country ISO 3166-1 alpha-2 codes\n   * Example: CH\n   */\n  country_code?: string;\n\n  /**\n   * Bounds of the country in WGS84 degrees [west, south, east, north].\n   * Example: [5.95538,45.818852,10.490936,47.809357]\n   */\n  country_bounds?: BBox;\n\n  /**\n   * Official country languages in ISO 639-1 format. ISO 639-1 codes\n   * Example: [\"de\",\"fr\",\"it\"]\n   */\n  country_languages?: Array<string>;\n\n  /**\n   * Name of the continent\n   * Example: Europe\n   */\n  continent?: string;\n\n  /**\n   * Two-letter code of the continent\n   * Example: EU\n   */\n  continent_code?: string;\n\n  /**\n   * Indicated whether the country is part of the European Union.\n   */\n  eu?: boolean;\n\n  /**\n   * Name of the city\n   * Example: Zurich\n   */\n  city?: string;\n\n  /**\n   * Latitude of the location\n   * Example: 47.36667\n   */\n  latitude?: number;\n\n  /**\n   * Longitude of the location\n   * Example: 8.55\n   */\n  longitude?: number;\n\n  /**\n   * Postal code\n   * Example: 8000\n   */\n  postal?: string;\n\n  /**\n   * If known, the ISO 3166-2 name for the first level region. ISO 3166-2 codes\n   * Example: Zurich\n   */\n  region?: string;\n\n  /**\n   * If known, the ISO 3166-2 code for the first level region. ISO 3166-2 codes\n   * Example: ZH\n   */\n  region_code?: string;\n\n  /**\n   * Name of the timezone\n   * Example: Europe/Zurich\n   */\n  timezone?: string;\n};\n\n/**\n * Looks up geolocation details from IP address using MapTiler API.\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/geolocation/#ip-geolocation\n * @returns\n */\nasync function info(\n  options: GeolocationInfoOptions = {}\n): Promise<GeolocationResult> {\n  const endpoint = new URL(`geolocation/ip.json`, defaults.maptilerApiURL);\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n  const urlWithParams = endpoint.toString();\n\n  const res = await callFetch(urlWithParams);\n\n  if (!res.ok) {\n    throw new ServiceError(\n      res,\n      res.status in customMessages ? customMessages[res.status] : \"\"\n    );\n  }\n\n  const obj = await res.json();\n  return obj as GeolocationResult;\n}\n\n/**\n * The **geolocation** namespace contains an asynchronous function to call the [MapTiler Geolocation API](https://docs.maptiler.com/cloud/api/geolocation/).\n * The **Geolocation API** provides a way to retrieve the IP address as well as geographic informations of a machine performing the query (most likely: a user)\n */\nconst geolocation = {\n  info,\n};\n\nexport { geolocation };\n","import { BBox, Position } from \"geojson\";\nimport { callFetch } from \"../callFetch\";\nimport { config } from \"../config\";\nimport { defaults } from \"../defaults\";\nimport { ServiceError } from \"./ServiceError\";\n\nconst customMessages = {\n  403: \"Key is missing, invalid or restricted\",\n};\n\nexport type CoordinatesSearchOptions = {\n  /**\n   * Custom MapTiler Cloud API key to use instead of the one in global `config`\n   */\n  apiKey?: string;\n\n  /**\n   * Maximum number of results returned (default: 10)\n   */\n  limit?: number;\n\n  /**\n   *  Show detailed transformations for each CRS (default: false)\n   */\n  transformations?: boolean;\n\n  /**\n   * Show exports in WKT and Proj4 notations (default: false)\n   */\n  exports?: boolean;\n};\n\nexport type CoordinateId = {\n  authority: string;\n  code: BigInteger;\n};\n\nexport type CoordinateExport = {\n  proj4: string;\n  wkt: string;\n};\n\nexport type CoordinateGrid = {\n  path: string;\n};\n\nexport type CoordinateTransformation = {\n  id: CoordinateId;\n  name: string;\n  reversible: boolean;\n  usable: boolean;\n  deprecated: boolean;\n  grids: Array<CoordinateGrid>;\n  accuracy?: number;\n  area?: string;\n  bbox?: BBox;\n  target_crs?: CoordinateId;\n  unit?: string;\n};\n\nexport type CoordinateSearch = {\n  id: CoordinateId;\n\n  name: string;\n\n  kind: string;\n\n  deprecated: boolean;\n\n  transformations?: Array<CoordinateTransformation | number>;\n\n  accuracy?: number;\n\n  unit?: string;\n\n  area?: string;\n\n  /**\n   * Bounding box of the resource in [min_lon, min_lat, max_lon, max_lat] order.\n   */\n  bbox?: BBox;\n\n  /**\n   * Most suitable transformation for this CRS.\n   */\n  default_transformation?: any;\n\n  exports: CoordinateExport;\n};\n\nexport type CoordinateSearchResult = {\n  /**\n   * The coordinate search results\n   */\n  results: Array<CoordinateSearch>;\n\n  /**\n   * The number of results\n   */\n  total: number;\n};\n\n/**\n * Search information about coordinate systems using MapTiler API.\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/coordinates/#search-coordinate-systems\n * @param query Can be any kind of CRS by name or code\n * @param options\n * @returns\n */\nasync function search(\n  query: string,\n  options: CoordinatesSearchOptions = {}\n): Promise<CoordinateSearchResult> {\n  if (typeof query !== \"string\" || query.trim().length === 0) {\n    throw new Error(\"The query must be a non-empty string\");\n  }\n\n  const endpoint = new URL(\n    `coordinates/search/${query}.json`,\n    defaults.maptilerApiURL\n  );\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n\n  if (\"limit\" in options) {\n    endpoint.searchParams.set(\"limit\", options.limit.toString());\n  }\n\n  if (\"transformations\" in options) {\n    endpoint.searchParams.set(\n      \"transformations\",\n      options.transformations.toString()\n    );\n  }\n\n  if (\"exports\" in options) {\n    endpoint.searchParams.set(\"exports\", options.exports.toString());\n  }\n\n  const urlWithParams = endpoint.toString();\n  const res = await callFetch(urlWithParams);\n\n  if (!res.ok) {\n    throw new ServiceError(\n      res,\n      res.status in customMessages ? customMessages[res.status] : \"\"\n    );\n  }\n\n  const obj = await res.json();\n  return obj as CoordinateSearchResult;\n}\n\nexport type XYZ = {\n  x?: number;\n  y?: number;\n  z?: number;\n};\n\nexport type CoordinateTransformResult = {\n  results: Array<XYZ>;\n\n  /**\n   * Transformations are selected using given ops parameter.\n   * If no parameter is given, auto strategy is used.\n   * If given, it may try to use a listed transformation,\n   * then fallback to towgs84 patching, and finally boundcrs.\n   */\n  transformer_selection_strategy: string;\n};\n\n/**\n * Options that can be provided when transforming a coordinate from one CRS to another.\n */\nexport type CoordinatesTransformOptions = {\n  /**\n   * Custom MapTiler Cloud API key to use instead of the one in global `config`\n   */\n  apiKey?: string;\n\n  /**\n   * Source coordinate reference system (default: 4326)\n   */\n  sourceCrs?: number;\n\n  /**\n   * Target coordinate reference system (default: 4326)\n   */\n  targetCrs?: number;\n\n  /**\n   * List of codes of operations\n   */\n  operations?: number | Array<number>;\n};\n\n/**\n * Transforms coordinates from a source reference system to a target reference system using MapTiler API.\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/coordinates/#transform-coordinates\n * @param positions\n * @param options\n * @returns\n */\nasync function transform(\n  positions: Position | Array<Position>,\n  options: CoordinatesTransformOptions = {}\n): Promise<CoordinateTransformResult> {\n  const coordinatesStr = (Array.isArray(positions[0]) ? positions : [positions])\n    .map((coord) => `${coord[0]},${coord[1]}`)\n    .join(\";\");\n\n  const endpoint = new URL(\n    `coordinates/transform/${coordinatesStr}.json`,\n    defaults.maptilerApiURL\n  );\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n\n  if (\"sourceCrs\" in options) {\n    endpoint.searchParams.set(\"s_srs\", options.sourceCrs.toString());\n  }\n\n  if (\"targetCrs\" in options) {\n    endpoint.searchParams.set(\"t_srs\", options.targetCrs.toString());\n  }\n\n  if (\"operations\" in options) {\n    endpoint.searchParams.set(\n      \"ops\",\n      (Array.isArray(options.operations)\n        ? options.operations\n        : [options.operations]\n      ).join(\"|\")\n    );\n  }\n\n  const urlWithParams = endpoint.toString();\n  const res = await callFetch(urlWithParams);\n\n  if (!res.ok) {\n    throw new ServiceError(\n      res,\n      res.status in customMessages ? customMessages[res.status] : \"\"\n    );\n  }\n\n  const obj = await res.json();\n  return obj as CoordinateTransformResult;\n}\n\n/**\n * The **coordinate** namespace contains asynchronous functions to call the [MapTiler Coordinate API](https://docs.maptiler.com/cloud/api/coordinates/).\n * The goal of the **Coordinate API* is query information about spatial coordinate reference system (CRS) as well as to transform coordinates from one CRS to another.\n */\nconst coordinates = {\n  search,\n  transform,\n};\n\nexport { coordinates };\n","import { FeatureCollection } from \"geojson\";\nimport { callFetch } from \"../callFetch\";\nimport { config } from \"../config\";\nimport { defaults } from \"../defaults\";\nimport { ServiceError } from \"./ServiceError\";\n\nconst customMessages = {\n  403: \"Key is missing, invalid or restricted\",\n};\n\n/**\n * Options that can be provided to get user data.\n */\nexport type GetDataOptions = {\n  /**\n   * Custom MapTiler Cloud API key to use instead of the one in global `config`\n   */\n  apiKey?: string;\n};\n\n/**\n * Get user data and returns it as GeoJSON using the MapTiler API.\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/data/#geojson\n * @param dataId\n * @returns\n */\nasync function get(\n  dataId: string,\n  options: GetDataOptions = {}\n): Promise<FeatureCollection> {\n  if (typeof dataId !== \"string\" || dataId.trim().length === 0) {\n    throw new Error(\"The data ID must be a non-empty string\");\n  }\n\n  const endpoint = new URL(\n    `data/${encodeURIComponent(dataId)}/features.json`,\n    defaults.maptilerApiURL\n  );\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n  const urlWithParams = endpoint.toString();\n\n  const res = await callFetch(urlWithParams);\n\n  if (!res.ok) {\n    throw new ServiceError(\n      res,\n      res.status in customMessages ? customMessages[res.status] : \"\"\n    );\n  }\n\n  const obj = await res.json();\n  return obj;\n}\n\n/**\n * The **data** namespace contains an asynchronous function to call the [MapTiler Data API](https://docs.maptiler.com/cloud/api/data/).\n * The **Data API** provides a way to retrieve user data in GeoJSON format.\n */\nconst data = {\n  get,\n};\n\nexport { data };\n","/**\n * Expand the map style provided as argument of the Map constructor\n * @param style\n * @returns\n */\nexport function expandMapStyle(style): string {\n  // testing if the style provided is of form \"maptiler://some-style\"\n  const maptilerDomainRegex = /^maptiler:\\/\\/(.*)/;\n  let match;\n  const trimmed = style.trim();\n  let expandedStyle;\n\n  // The style was possibly already given as expanded URL\n  if (trimmed.startsWith(\"http://\") || trimmed.startsWith(\"https://\")) {\n    expandedStyle = trimmed;\n  } else if ((match = maptilerDomainRegex.exec(trimmed)) !== null) {\n    expandedStyle = `https://api.maptiler.com/maps/${match[1]}/style.json`;\n  } else {\n    // The style could also possibly just be the name of the style without any URI style\n    expandedStyle = `https://api.maptiler.com/maps/${trimmed}/style.json`;\n  }\n\n  return expandedStyle;\n}\n\n/**\n * Type for object containing style details\n */\nexport type MapStylePreset = {\n  referenceStyleID: string;\n  name: string;\n  description: string;\n  variants: Array<{\n    id: string;\n    name: string;\n    variantType: string;\n    description: string;\n    imageURL: string;\n  }>;\n};\n\n/**\n * An instance of MapStyleVariant contains information about a style to use that belong to a reference style\n */\nexport class MapStyleVariant {\n  constructor(\n    /**\n     * Human-friendly name\n     */\n    private name: string,\n\n    /**\n     * Variant name the variant is addressed to from its reference style: `MapStyle.REFERNCE_STYLE_NAME.VARIANT_TYPE`\n     */\n    private variantType: string,\n\n    /**\n     * MapTiler Cloud id\n     */\n    private id: string,\n\n    /**\n     * Reference map style, used to retrieve sibling variants\n     */\n    private referenceStyle: ReferenceMapStyle,\n\n    /**\n     * Human-friendly description\n     */\n    private description: string,\n\n    /**\n     * URL to an image describing the style variant\n     */\n    private imageURL: string\n  ) {}\n\n  /**\n   * Get the human-friendly name\n   * @returns\n   */\n  getName(): string {\n    return this.name;\n  }\n\n  getFullName(): string {\n    return `${this.referenceStyle.getName()} ${this.name}`;\n  }\n\n  /**\n   * Get the variant type (eg. \"DEFAULT\", \"DARK\", \"PASTEL\", etc.)\n   * @returns\n   */\n  getType(): string {\n    return this.variantType;\n  }\n\n  /**\n   * Get the MapTiler Cloud id\n   * @returns\n   */\n  getId(): string {\n    return this.id;\n  }\n\n  /**\n   * Get the human-friendly description\n   */\n  getDescription(): string {\n    return this.description;\n  }\n\n  /**\n   * Get the reference style this variant belongs to\n   * @returns\n   */\n  getReferenceStyle(): ReferenceMapStyle {\n    return this.referenceStyle;\n  }\n\n  /**\n   * Check if a variant of a given type exists for _this_ variants\n   * (eg. if this is a \"DARK\", then we can check if there is a \"LIGHT\" variant of it)\n   * @param variantType\n   * @returns\n   */\n  hasVariant(variantType: string): boolean {\n    return this.referenceStyle.hasVariant(variantType);\n  }\n\n  /**\n   * Retrieve the variant of a given type. If not found, will return the \"DEFAULT\" variant.\n   * (eg. _this_ \"DARK\" variant does not have any \"PASTEL\" variant, then the \"DEFAULT\" is returned)\n   * @param variantType\n   * @returns\n   */\n  getVariant(variantType: string): MapStyleVariant {\n    return this.referenceStyle.getVariant(variantType);\n  }\n\n  /**\n   * Get all the variants for _this_ variants, except _this_ current one\n   * @returns\n   */\n  getVariants(): Array<MapStyleVariant> {\n    return this.referenceStyle.getVariants().filter((v) => v !== this);\n  }\n\n  /**\n   * Get the image URL that represent _this_ variant\n   * @returns\n   */\n  getImageURL(): string {\n    return this.imageURL;\n  }\n\n  /**\n   * Get the style as usable by MapLibre, a string (URL) or a plain style description (StyleSpecification)\n   * @returns\n   */\n  getExpandedStyleURL(): string {\n    return expandMapStyle(this.getId());\n  }\n}\n\n/**\n * An instance of reference style contains a list of StyleVariants ordered by relevance\n */\nexport class ReferenceMapStyle {\n  /**\n   * Variants that belong to this reference style, key being the reference type\n   */\n  private variants: { [key: string]: MapStyleVariant } = {};\n\n  /**\n   * Variants that belong to this reference style, ordered by relevance\n   */\n  private orderedVariants: Array<MapStyleVariant> = [];\n\n  constructor(\n    /**\n     * Human-friendly name of this reference style\n     */\n    private name: string,\n\n    /**\n     * ID of this reference style\n     */\n    private id: string\n  ) {}\n\n  /**\n   * Get the human-friendly name of this reference style\n   * @returns\n   */\n  getName(): string {\n    return this.name;\n  }\n\n  /**\n   * Get the id of _this_ reference style\n   * @returns\n   */\n  getId(): string {\n    return this.id;\n  }\n\n  /**\n   * Add a variant to _this_ reference style\n   * @param v\n   */\n  addVariant(v: MapStyleVariant) {\n    this.variants[v.getType()] = v;\n    this.orderedVariants.push(v);\n  }\n\n  /**\n   * Check if a given variant type exists for this reference style\n   * @param variantType\n   * @returns\n   */\n  hasVariant(variantType: string): boolean {\n    return variantType in this.variants;\n  }\n\n  /**\n   * Get a given variant. If the given type of variant does not exist for this reference style,\n   * then the most relevant default variant is returned instead\n   * @param variantType\n   * @returns\n   */\n  getVariant(variantType: string): MapStyleVariant {\n    return variantType in this.variants\n      ? this.variants[variantType]\n      : this.orderedVariants[0];\n  }\n\n  /**\n   * Get the list of variants for this reference style\n   * @returns\n   */\n  getVariants(): Array<MapStyleVariant> {\n    return Object.values(this.variants);\n  }\n\n  /**\n   * Get the defualt variant for this reference style\n   * @returns\n   */\n  getDefaultVariant(): MapStyleVariant {\n    return this.orderedVariants[0];\n  }\n}\n\n/**\n * All the styles and variants maintained by MapTiler.\n */\nexport type MapStyleType = {\n  /**\n   * Suitable for navigation, with high level of detail on urban areas, plenty of POIs and 3D buildings\n   */\n  STREETS: ReferenceMapStyle & {\n    /**\n     * Suitable for navigation, with high level of detail on urban areas, plenty of POIs and 3D buildings.\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     * Suitable for navigation, with high level of detail on urban areas, plenty of POIs and 3D buildings, in dark mode.\n     */\n    DARK: MapStyleVariant;\n    /**\n     * Suitable for navigation, with high level of detail on urban areas, plenty of POIs and 3D buildings, in light mode.\n     */\n    LIGHT: MapStyleVariant;\n    /**\n     * Suitable for navigation, with high level of detail on urban areas, plenty of POIs and 3D buildings, in blue night mode.\n     */\n    NIGHT: MapStyleVariant;\n    /**\n     * Suitable for navigation, with high level of detail on urban areas, plenty of POIs and 3D buildings, with a pastel color palette.\n     */\n    PASTEL: MapStyleVariant;\n  };\n\n  /**\n   * Suitable for outdoor activities. With elevation isolines and hillshading.\n   */\n  OUTDOOR: ReferenceMapStyle & {\n    /**\n     * Suitable for outdoor activities. With elevation isolines and hillshading.\n     */\n    DEFAULT: MapStyleVariant;\n\n    /**\n     * Suitable for outdoor activities. With elevation isolines and hillshading, in dark mode.\n     */\n    DARK: MapStyleVariant;\n  };\n\n  /**\n   * Suitabe for winter outdoor activities. With ski tracks, elevation isolines and hillshading.\n   */\n  WINTER: ReferenceMapStyle & {\n    /**\n     * Suitabe for winter outdoor activities. With ski tracks, elevation isolines and hillshading.\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     * Suitabe for winter outdoor activities. With ski tracks, elevation isolines and hillshading, in dark mode.\n     */\n    DARK: MapStyleVariant;\n  };\n\n  /**\n   * High resolution imagery only, without any label.\n   */\n  SATELLITE: ReferenceMapStyle & {\n    /**\n     * High resolution imagery only, without any label.\n     */\n    DEFAULT: MapStyleVariant;\n  };\n\n  /**\n   * High resolution imagery with labels, political borders and roads.\n   */\n  HYBRID: ReferenceMapStyle & {\n    /**\n     * High resolution imagery with labels, political borders and roads.\n     */\n    DEFAULT: MapStyleVariant;\n  };\n\n  /**\n   * A minimalist street-oriented style without POI\n   */\n  BASIC: ReferenceMapStyle & {\n    /**\n     * A minimalist street-oriented style without POI\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     * A minimalist street-oriented style without POI, in dark mode\n     */\n    DARK: MapStyleVariant;\n    /**\n     * A minimalist street-oriented style without POI, in light mode\n     */\n    LIGHT: MapStyleVariant;\n  };\n\n  /**\n   * A bright street-oriented style, a nice alternative to `streets`\n   */\n  BRIGHT: ReferenceMapStyle & {\n    /**\n     * A bright street-oriented style, a nice alternative to `streets`\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     * A bright street-oriented style, a nice alternative to `streets`, in dark mode\n     */\n    DARK: MapStyleVariant;\n    /**\n     * A bright street-oriented style, a nice alternative to `streets`, in light mode\n     */\n    LIGHT: MapStyleVariant;\n    /**\n     * A bright street-oriented style, a nice alternative to `streets`, with a soft pastel color palette\n     */\n    PASTEL: MapStyleVariant;\n  };\n\n  /**\n   * Classic OpenStreetMap style\n   */\n  OPENSTREETMAP: ReferenceMapStyle & {\n    DEFAULT: MapStyleVariant;\n  };\n\n  /**\n   * A nice high-contrast, yet less saturated alternative to the `outdoor` style, with hillshading, 3D buildings and fairly high street details\n   */\n  TOPO: ReferenceMapStyle & {\n    /**\n     * A nice high-contrast, yet less saturated alternative to the `outdoor` style, with hillshading, 3D buildings and fairly high street details\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     * A nice high-contrast, yet less saturated alternative to the `outdoor` style, with hillshading, 3D buildings and fairly high street details, in dark mode\n     */\n    DARK: MapStyleVariant;\n    /**\n     * A nice high-contrast, and high saturation alternative to the `outdoor` style, with hillshading, 3D buildings and fairly high street details\n     */\n    SHINY: MapStyleVariant;\n    /**\n     * A nice low-contrast, alternative to the `outdoor` style, with hillshading, 3D buildings and fairly high street details, using a soft pastel color palette\n     */\n    PASTEL: MapStyleVariant;\n\n    /**\n     * A nice very high-contrast, yet less saturated alternative to the `outdoor` style, with hillshading, 3D buildings and fairly high street details\n     */\n    TOPOGRAPHIQUE: MapStyleVariant;\n  };\n\n  /**\n   * A nice alternative to `streets` with a soft color palette\n   */\n  VOYAGER: ReferenceMapStyle & {\n    /**\n     * A nice alternative to `streets` with a soft color palette\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     * A nice alternative to `streets`, in very dark mode\n     */\n    DARK: MapStyleVariant;\n    /**\n     * A nice alternative to `streets`, in light mode\n     */\n    LIGHT: MapStyleVariant;\n    /**\n     * A nice alternative to `streets` with a soft sepia color palette and vintage look\n     */\n    VINTAGE: MapStyleVariant;\n  };\n\n  /**\n   * A bold very high contrast black and white (no gray!) style for the city\n   */\n  TONER: ReferenceMapStyle & {\n    /**\n     * A bold very high contrast black and white (no gray!) style for the city\n     */\n    DEFAULT: MapStyleVariant;\n    /**\n     * A bold very high contrast black and white (no gray!) style for the city, without any label\n     */\n    BACKGROUND: MapStyleVariant;\n    /**\n     * A bold very high contrast, yet faded, style for the city\n     */\n    LITE: MapStyleVariant;\n    /**\n     * A bold very high contrast black and white (no gray!) style for the city, with no building, only roads!\n     */\n    LINES: MapStyleVariant;\n  };\n\n  /**\n   * Minimalist style, perfect for data visualization\n   */\n  DATAVIZ: ReferenceMapStyle & {\n    /**\n     *  Minimalist style, perfect for data visualization\n     */\n    DEFAULT: MapStyleVariant;\n\n    /**\n     *  Minimalist style, perfect for data visualization in dark mode\n     */\n    DARK: MapStyleVariant;\n\n    /**\n     *  Minimalist style, perfect for data visualization in light mode\n     */\n    LIGHT: MapStyleVariant;\n  };\n\n  /**\n   * Explore deep see trenches and mountains, with isolines and depth labels\n   */\n  OCEAN: ReferenceMapStyle & {\n    /**\n     * Explore deep see trenches and mountains, with isolines and depth labels\n     */\n    DEFAULT: MapStyleVariant;\n  };\n\n  /**\n   * Neutral greyscale style with hillshading suitable for colorful terrain-aware visualization\n   */\n  BACKDROP: ReferenceMapStyle & {\n    /**\n     *  Neutral greyscale style with hillshading suitable for colorful terrain-aware visualization\n     */\n    DEFAULT: MapStyleVariant;\n\n    /**\n     *  Dark greyscale style with hillshading suitable for colorful terrain-aware visualization\n     */\n    DARK: MapStyleVariant;\n\n    /**\n     *  Light greyscale style with hillshading suitable for colorful terrain-aware visualization\n     */\n    LIGHT: MapStyleVariant;\n  };\n};\n\nexport const mapStylePresetList: Array<MapStylePreset> = [\n  {\n    referenceStyleID: \"STREETS\",\n    name: \"Streets\",\n    description: \"\",\n    variants: [\n      {\n        id: \"streets-v2\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"streets-v2-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"streets-v2-light\",\n        name: \"Light\",\n        variantType: \"LIGHT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"streets-v2-night\",\n        name: \"Night\",\n        variantType: \"NIGHT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"streets-v2-pastel\",\n        name: \"Pastel\",\n        variantType: \"PASTEL\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"OUTDOOR\",\n    name: \"Outdoor\",\n    description: \"\",\n    variants: [\n      {\n        id: \"outdoor-v2\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"outdoor-v2-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"WINTER\",\n    name: \"Winter\",\n    description: \"\",\n    variants: [\n      {\n        id: \"winter-v2\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"winter-v2-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"SATELLITE\",\n    name: \"Satellite\",\n    description: \"\",\n    variants: [\n      {\n        id: \"satellite\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"HYBRID\",\n    name: \"Hybrid\",\n    description: \"\",\n    variants: [\n      {\n        id: \"hybrid\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"BASIC\",\n    name: \"Basic\",\n    description: \"\",\n    variants: [\n      {\n        id: \"basic-v2\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"basic-v2-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"basic-v2-light\",\n        name: \"Light\",\n        variantType: \"LIGHT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"BRIGHT\",\n    name: \"Bright\",\n    description: \"\",\n    variants: [\n      {\n        id: \"bright-v2\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"bright-v2-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"bright-v2-light\",\n        name: \"Light\",\n        variantType: \"LIGHT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"bright-v2-pastel\",\n        name: \"Pastel\",\n        variantType: \"PASTEL\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"OPENSTREETMAP\",\n    name: \"OpenStreetMap\",\n    description: \"\",\n    variants: [\n      {\n        id: \"openstreetmap\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"TOPO\",\n    name: \"Topo\",\n    description: \"\",\n    variants: [\n      {\n        id: \"topo-v2\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"topo-v2-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"topo-v2-shiny\",\n        name: \"Shiny\",\n        variantType: \"SHINY\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"topo-v2-pastel\",\n        name: \"Pastel\",\n        variantType: \"PASTEL\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"topo-v2-topographique\",\n        name: \"Topographique\",\n        variantType: \"TOPOGRAPHIQUE\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"VOYAGER\",\n    name: \"Voyager\",\n    description: \"\",\n    variants: [\n      {\n        id: \"voyager-v2\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"voyager-v2-darkmatter\",\n        name: \"Darkmatter\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"voyager-v2-positron\",\n        name: \"Positron\",\n        variantType: \"LIGHT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"voyager-v2-vintage\",\n        name: \"Vintage\",\n        variantType: \"VINTAGE\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"TONER\",\n    name: \"Toner\",\n    description: \"\",\n    variants: [\n      {\n        id: \"toner-v2\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"toner-v2-background\",\n        name: \"Background\",\n        variantType: \"BACKGROUND\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"toner-v2-lite\",\n        name: \"Lite\",\n        variantType: \"LITE\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"toner-v2-lines\",\n        name: \"Lines\",\n        variantType: \"LINES\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"DATAVIZ\",\n    name: \"Dataviz\",\n    description: \"\",\n    variants: [\n      {\n        id: \"dataviz\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"dataviz-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"dataviz-light\",\n        name: \"Light\",\n        variantType: \"LIGHT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"BACKDROP\",\n    name: \"Backdrop\",\n    description: \"\",\n    variants: [\n      {\n        id: \"backdrop\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"backdrop-dark\",\n        name: \"Dark\",\n        variantType: \"DARK\",\n        description: \"\",\n        imageURL: \"\",\n      },\n      {\n        id: \"backdrop-light\",\n        name: \"Light\",\n        variantType: \"LIGHT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n\n  {\n    referenceStyleID: \"OCEAN\",\n    name: \"Ocean\",\n    description: \"\",\n    variants: [\n      {\n        id: \"ocean\",\n        name: \"Default\",\n        variantType: \"DEFAULT\",\n        description: \"\",\n        imageURL: \"\",\n      },\n    ],\n  },\n];\n\nfunction makeReferenceStyleProxy(referenceStyle: ReferenceMapStyle) {\n  return new Proxy(referenceStyle, {\n    get(target, prop, receiver) {\n      if (target.hasVariant(prop as string)) {\n        return target.getVariant(prop as string);\n      }\n\n      // This variant does not exist for this style, but since it's full uppercase\n      // we guess that the dev tries to access a style variant. So instead of\n      // returning the default (STREETS.DEFAULT), we return the non-variant of the current style\n      if (prop.toString().toUpperCase() === (prop as string)) {\n        return referenceStyle.getDefaultVariant();\n      }\n\n      return Reflect.get(target, prop, receiver);\n    },\n  });\n}\n\nfunction buildMapStyles(): MapStyleType {\n  const mapStyle = {};\n\n  for (let i = 0; i < mapStylePresetList.length; i += 1) {\n    const refStyleInfo = mapStylePresetList[i];\n\n    const refStyle = makeReferenceStyleProxy(\n      new ReferenceMapStyle(refStyleInfo.name, refStyleInfo.referenceStyleID)\n    );\n\n    for (let j = 0; j < refStyleInfo.variants.length; j += 1) {\n      const variantInfo = refStyleInfo.variants[j];\n      const variant = new MapStyleVariant(\n        variantInfo.name, // name\n        variantInfo.variantType, // variantType\n        variantInfo.id, // id\n        refStyle, // referenceStyle\n        variantInfo.description,\n        variantInfo.imageURL // imageURL\n      );\n\n      refStyle.addVariant(variant);\n    }\n    mapStyle[refStyleInfo.referenceStyleID] = refStyle;\n  }\n  return mapStyle as MapStyleType;\n}\n\nexport function styleToStyle(\n  style: string | ReferenceMapStyle | MapStyleVariant | null | undefined\n): string {\n  if (!style) {\n    return MapStyle[mapStylePresetList[0].referenceStyleID]\n      .getDefaultVariant()\n      .getId();\n  }\n\n  // If the provided style is a shorthand (eg. \"streets-v2\") then we make sure it's trimmed and lowercase\n  if (typeof style === \"string\" || style instanceof String) {\n    return style.trim().toLowerCase();\n  }\n\n  if (style instanceof MapStyleVariant) {\n    return style.getId();\n  }\n\n  if (style instanceof ReferenceMapStyle) {\n    return style.getDefaultVariant().getId();\n  }\n}\n\n/**\n * Contains all the reference map style created by MapTiler team as well as all the variants.\n * For example, `MapStyle.STREETS` and the variants:\n * - `MapStyle.STREETS.DARK`\n * - `MapStyle.STREETS.LIGHT`\n * - `MapStyle.STREETS.PASTEL`\n *\n */\nexport const MapStyle: MapStyleType = buildMapStyles();\n","/**\\\n * This code is borrowed from https://github.com/mourner/simplify-js and reworked a little.\n */\n\nimport { Position } from \"geojson\";\n\n// square distance from a point to a segment\nfunction getSqSegDist(p: Position, p1: Position, p2: Position): number {\n  let x = p1[0],\n    y = p1[1],\n    dx = p2[0] - x,\n    dy = p2[1] - y;\n\n  if (dx !== 0 || dy !== 0) {\n    const t = ((p[0] - x) * dx + (p[1] - y) * dy) / (dx * dx + dy * dy);\n\n    if (t > 1) {\n      x = p2[0];\n      y = p2[1];\n    } else if (t > 0) {\n      x += dx * t;\n      y += dy * t;\n    }\n  }\n\n  dx = p[0] - x;\n  dy = p[1] - y;\n\n  return dx * dx + dy * dy;\n}\n\nfunction simplifyDPStep(\n  points: Array<Position>,\n  first: number,\n  last: number,\n  sqTolerance: number,\n  simplified: Array<Position>\n) {\n  let maxSqDist = sqTolerance,\n    index;\n\n  for (let i = first + 1; i < last; i++) {\n    const sqDist = getSqSegDist(points[i], points[first], points[last]);\n\n    if (sqDist > maxSqDist) {\n      index = i;\n      maxSqDist = sqDist;\n    }\n  }\n\n  if (maxSqDist > sqTolerance) {\n    if (index - first > 1) {\n      simplifyDPStep(points, first, index, sqTolerance, simplified);\n    }\n    simplified.push(points[index]);\n\n    if (last - index > 1) {\n      simplifyDPStep(points, index, last, sqTolerance, simplified);\n    }\n  }\n}\n\n// simplification using Ramer-Douglas-Peucker algorithm\nfunction simplifyDouglasPeucker(\n  points: Array<Position>,\n  sqTolerance: number\n): Array<Position> {\n  const last = points.length - 1;\n  const simplified = [points[0]];\n  simplifyDPStep(points, 0, last, sqTolerance, simplified);\n  simplified.push(points[last]);\n  return simplified;\n}\n\n// both algorithms combined for awesome performance\nexport default function simplify(\n  points: Array<Position>,\n  tolerance: number\n): Array<Position> {\n  if (points.length <= 2) {\n    return points;\n  }\n\n  const sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;\n  const simplePoints = simplifyDouglasPeucker(points, sqTolerance);\n  return simplePoints;\n}\n","import { BBox, Position } from \"geojson\";\nimport { config } from \"../config\";\nimport { defaults } from \"../defaults\";\nimport { MapStyleVariant, ReferenceMapStyle, styleToStyle } from \"../mapstyle\";\nimport simplify from \"./simplify\";\n\n/**\n * Base set of options that can be provided to all the types of static maps\n */\nexport type StaticMapBaseOptions = {\n  /**\n   * Custom MapTiler Cloud API key to use instead of the one in global `config`\n   */\n  apiKey?: string;\n\n  /**\n   * Style of the map (not full style URL). Example: \"winter\", \"streets-v2\".\n   * Default: `\"streets-v2\"`\n   */\n  style?: string | ReferenceMapStyle | MapStyleVariant;\n\n  /**\n   * Double the size of the static map image to support hiDPI/Retina monitors.\n   * Default: `false`\n   */\n  hiDPI?: boolean;\n\n  /**\n   * Image format.\n   * Default: `\"png\"`\n   */\n  format?: \"png\" | \"jpg\" | \"webp\";\n\n  /**\n   * Width of the output image. Maximum value: `2048`.\n   * Default: `1024`\n   */\n  width?: number;\n\n  /**\n   * Height of the output image. Maximum value: `2048`.\n   * Default: `1024`\n   */\n  height?: number;\n\n  /**\n   * Placement of the attribution. Can also be set to `false` to not show attribution.\n   * Default: `\"bottomright\"`\n   */\n  attribution?: \"bottomright\" | \"bottomleft\" | \"topleft\" | \"topright\" | false;\n\n  /**\n   * A marker or list of markers to show on the map\n   * Default: none provided\n   */\n  markers?: StaticMapMarker | Array<StaticMapMarker>;\n\n  /**\n   * URL of the marker image. Applies only if one or multiple markers positions are provided.\n   * Default: none provided\n   */\n  markerIcon?: string;\n\n  /**\n   * Position of the marker regarding its coordinates. Applies only:\n   * - with a custom icon provided with `markerIcon`\n   * - if one or multiple markers positions are provided.\n   * Default: `\"bottom\"`\n   */\n  markerAnchor?:\n    | \"top\"\n    | \"left\"\n    | \"bottom\"\n    | \"right\"\n    | \"center\"\n    | \"topleft\"\n    | \"bottomleft\"\n    | \"topright\"\n    | \"bottomright\";\n\n  /**\n   * Draw a path or polygon on top of the map. If the path is too long it will be simplified, yet remaining accurate.\n   * Default: none provided\n   */\n  path?: Array<Position>;\n\n  /**\n   * Color of the path line. The color must be CSS compatible.\n   * Examples:\n   * - long form hex without transparency `\"#FF0000\"` (red)\n   * - short form hex without transparency `\"#F00\"` (red)\n   * - long form hex with transparency `\"#FF000008\"` (red, half opacity)\n   * - short form hex with transparency `\"#F008\"` (red, half opacity)\n   * - CSS color shorthands: `\"red\"`, `\"chartreuse\"`, etc.\n   * - decimal RGB values without transparency: `\"rgb(128, 100, 255)\"`\n   * - decimal RGB values with transparency: `\"rgb(128, 100, 255, 0.5)\"`\n   * Default: `\"blue\"`\n   */\n  pathStrokeColor?: string;\n\n  /**\n   * Color of the filling, also works if the polygon is not closed. The color must be CSS compatible.\n   * Examples:\n   * - long form hex without transparency `\"#FF0000\"` (red)\n   * - short form hex without transparency `\"#F00\"` (red)\n   * - long form hex with transparency `\"#FF000008\"` (red, half opacity)\n   * - short form hex with transparency `\"#F008\"` (red, half opacity)\n   * - CSS color shorthands: `\"red\"`, `\"chartreuse\"`, etc.\n   * - decimal RGB values without transparency: `\"rgb(128, 100, 255)\"`\n   * - decimal RGB values with transparency: `\"rgb(128, 100, 255, 0.5)\"`\n   * Default: none (transparent filling)\n   */\n  pathFillColor?: string;\n\n  /**\n   * Width of the path line in pixel. It can be floating point precision (ex: `0.5`)\n   * Default: `1` if `hiDPI` is `false` and `2` if `hiDPI` is `true`.\n   */\n  pathWidth?: number;\n};\n\n/**\n * Options that can be provided to centered static maps\n */\nexport type CenteredStaticMapOptions = StaticMapBaseOptions;\n\n/**\n * Options that can be provided to bounded static maps\n */\nexport type BoundedStaticMapOptions = StaticMapBaseOptions & {\n  /**\n   * Extra space added around the regio of interest, in percentage.\n   * Default: `0.1` (for 10%)\n   */\n  padding?: number;\n};\n\n/**\n * Options that can be provided to automatic static maps\n */\nexport type AutomaticStaticMapOptions = BoundedStaticMapOptions;\n\n/**\n * Definition of a maker to show on a static map\n */\nexport type StaticMapMarker = [\n  /**\n   * Longitude of the marker\n   */\n  number,\n  /**\n   * latitude of the marker\n   */\n  number,\n  /**\n   * Color of the marker with CSS syntax. Applies only if a custom `markerIcon` is not provided.\n   */\n  string\n];\n\nfunction staticMapMarkerToString(\n  marker: StaticMapMarker,\n  includeColor = true\n): string {\n  let str = `${marker[0]},${marker[1]}`;\n\n  if (marker.length === 3 && includeColor) {\n    str += `,${marker[2]}`;\n  }\n\n  return str;\n}\n\nfunction simplifyAndStringify(path: Array<Position>, maxNbChar = 3000): string {\n  let str = path.map((point) => point.join(\",\")).join(\"|\");\n  let tolerance = 0.000005;\n  const toleranceStep = 0.00001;\n\n  while (str.length > maxNbChar) {\n    const simplerPath = simplify(path, tolerance);\n    // str = simplerPath.map(point => point.join(',')).join('|');\n    str = simplerPath.map((point) => `${point[0]},${point[1]}`).join(\"|\");\n    tolerance += toleranceStep;\n  }\n\n  return str;\n}\n\n/**\n * Construct the URL for a static map centered on one point.\n * Note: this function does not fetch the binary content of the image since\n * the purpose of a static map is generally to have its URL as a `src` property of a <img/> element.\n * If a path is provided and is too long, it will be simplified in an accurate way.\n * @param center\n * @param zoom\n * @param options\n * @returns\n */\nfunction centered(\n  center: Position,\n  zoom: number,\n  options: CenteredStaticMapOptions = {}\n): string {\n  const style = styleToStyle(options.style);\n  const scale = options.hiDPI ? \"@2x\" : \"\";\n  const format = options.format ?? \"png\";\n  let width = ~~(options.width ?? 1024);\n  let height = ~~(options.height ?? 1024);\n\n  if (options.hiDPI) {\n    width = ~~(width / 2);\n    height = ~~(height / 2);\n  }\n\n  const endpoint = new URL(\n    `maps/${encodeURIComponent(style)}/static/${center[0]},${\n      center[1]\n    },${zoom}/${width}x${height}${scale}.${format}`,\n    defaults.maptilerApiURL\n  );\n\n  if (\"attribution\" in options) {\n    endpoint.searchParams.set(\"attribution\", options.attribution.toString());\n  }\n\n  if (\"markers\" in options) {\n    let markerStr = \"\";\n\n    const hasIcon = \"markerIcon\" in options;\n\n    if (hasIcon) {\n      markerStr += `icon:${options.markerIcon}|`;\n    }\n\n    if (hasIcon && \"markerAnchor\" in options) {\n      markerStr += `anchor:${options.markerAnchor}|`;\n    }\n\n    if (hasIcon && options.hiDPI) {\n      markerStr += `scale:2|`;\n    }\n\n    const markerList = Array.isArray(options.markers[0])\n      ? options.markers\n      : [options.markers];\n    markerStr += markerList\n      .map((m) => staticMapMarkerToString(m, !hasIcon))\n      .join(\"|\");\n    endpoint.searchParams.set(\"markers\", markerStr);\n  }\n\n  if (\"path\" in options) {\n    let pathStr = \"\";\n\n    pathStr += `fill:${options.pathFillColor ?? \"none\"}|`;\n\n    if (\"pathStrokeColor\" in options) {\n      pathStr += `stroke:${options.pathStrokeColor}|`;\n    }\n\n    if (\"pathWidth\" in options) {\n      const pathWidth = options.pathWidth / (options.hiDPI ? 2 : 1);\n      pathStr += `width:${pathWidth.toString()}|`;\n    }\n\n    pathStr += simplifyAndStringify(options.path);\n    endpoint.searchParams.set(\"path\", pathStr);\n  }\n\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n\n  return endpoint.toString();\n}\n\n/**\n * Construct the URL for a static map using a bounding box\n * Note: this function does not fetch the binary content of the image since\n * the purpose of a static map is generally to have its URL as a `src` property of a <img/> element.\n * If a path is provided and is too long, it will be simplified in an accurate way.\n * @param boundingBox\n * @param options\n * @returns\n */\nfunction bounded(\n  boundingBox: BBox,\n  options: BoundedStaticMapOptions = {}\n): string {\n  const style = styleToStyle(options.style);\n  const scale = options.hiDPI ? \"@2x\" : \"\";\n  const format = options.format ?? \"png\";\n  let width = ~~(options.width ?? 1024);\n  let height = ~~(options.height ?? 1024);\n\n  if (options.hiDPI) {\n    width = ~~(width / 2);\n    height = ~~(height / 2);\n  }\n\n  const endpoint = new URL(\n    `maps/${encodeURIComponent(style)}/static/${boundingBox[0]},${\n      boundingBox[1]\n    },${boundingBox[2]},${boundingBox[3]}/${width}x${height}${scale}.${format}`,\n    defaults.maptilerApiURL\n  );\n\n  if (\"attribution\" in options) {\n    endpoint.searchParams.set(\"attribution\", options.attribution.toString());\n  }\n\n  if (\"padding\" in options) {\n    endpoint.searchParams.set(\"padding\", options.padding.toString());\n  }\n\n  if (\"markers\" in options) {\n    let markerStr = \"\";\n\n    const hasIcon = \"markerIcon\" in options;\n\n    if (hasIcon) {\n      markerStr += `icon:${options.markerIcon}|`;\n    }\n\n    if (hasIcon && \"markerAnchor\" in options) {\n      markerStr += `anchor:${options.markerAnchor}|`;\n    }\n\n    if (hasIcon && options.hiDPI) {\n      markerStr += `scale:2|`;\n    }\n\n    const markerList = Array.isArray(options.markers[0])\n      ? options.markers\n      : [options.markers];\n    markerStr += markerList\n      .map((m) => staticMapMarkerToString(m, !hasIcon))\n      .join(\"|\");\n    endpoint.searchParams.set(\"markers\", markerStr);\n  }\n\n  if (\"path\" in options) {\n    let pathStr = \"\";\n\n    pathStr += `fill:${options.pathFillColor ?? \"none\"}|`;\n\n    if (\"pathStrokeColor\" in options) {\n      pathStr += `stroke:${options.pathStrokeColor}|`;\n    }\n\n    if (\"pathWidth\" in options) {\n      const pathWidth = options.pathWidth / (options.hiDPI ? 2 : 1);\n      pathStr += `width:${pathWidth.toString()}|`;\n    }\n\n    pathStr += simplifyAndStringify(options.path);\n    endpoint.searchParams.set(\"path\", pathStr);\n  }\n\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n\n  return endpoint.toString();\n}\n\n/**\n * Construct the URL for a static map automatically fitted around the provided path or markers.\n * Note: this function does not fetch the binary content of the image since\n * the purpose of a static map is generally to have its URL as a `src` property of a <img/> element.\n * If a path is provided and is too long, it will be simplified in an accurate way.\n * @param options\n * @returns\n */\nfunction automatic(options: AutomaticStaticMapOptions = {}): string {\n  if (!(\"markers\" in options) && !(\"path\" in options)) {\n    throw new Error(\n      \"Automatic static maps require markers and/or path to be created.\"\n    );\n  }\n\n  const style = styleToStyle(options.style);\n  const scale = options.hiDPI ? \"@2x\" : \"\";\n  const format = options.format ?? \"png\";\n  let width = ~~(options.width ?? 1024);\n  let height = ~~(options.height ?? 1024);\n\n  if (options.hiDPI) {\n    width = ~~(width / 2);\n    height = ~~(height / 2);\n  }\n\n  const endpoint = new URL(\n    `maps/${encodeURIComponent(\n      style\n    )}/static/auto/${width}x${height}${scale}.${format}`,\n    defaults.maptilerApiURL\n  );\n\n  if (\"attribution\" in options) {\n    endpoint.searchParams.set(\"attribution\", options.attribution.toString());\n  }\n\n  if (\"padding\" in options) {\n    endpoint.searchParams.set(\"padding\", options.padding.toString());\n  }\n\n  if (\"markers\" in options) {\n    let markerStr = \"\";\n\n    const hasIcon = \"markerIcon\" in options;\n\n    if (hasIcon) {\n      markerStr += `icon:${options.markerIcon}|`;\n    }\n\n    if (hasIcon && \"markerAnchor\" in options) {\n      markerStr += `anchor:${options.markerAnchor}|`;\n    }\n\n    if (hasIcon && options.hiDPI) {\n      markerStr += `scale:2|`;\n    }\n\n    const markerList = Array.isArray(options.markers[0])\n      ? options.markers\n      : [options.markers];\n    markerStr += markerList\n      .map((m) => staticMapMarkerToString(m, !hasIcon))\n      .join(\"|\");\n    endpoint.searchParams.set(\"markers\", markerStr);\n  }\n\n  if (\"path\" in options) {\n    let pathStr = \"\";\n\n    pathStr += `fill:${options.pathFillColor ?? \"none\"}|`;\n\n    if (\"pathStrokeColor\" in options) {\n      pathStr += `stroke:${options.pathStrokeColor}|`;\n    }\n\n    if (\"pathWidth\" in options) {\n      const pathWidth = options.pathWidth / (options.hiDPI ? 2 : 1);\n      pathStr += `width:${pathWidth.toString()}|`;\n    }\n\n    pathStr += simplifyAndStringify(options.path);\n    endpoint.searchParams.set(\"path\", pathStr);\n  }\n\n  endpoint.searchParams.set(\"key\", options.apiKey ?? config.apiKey);\n\n  return endpoint.toString();\n}\n\n/**\n * The **staticMaps** namespace contains an synchronous function build image URL of static map, as specified by the [MapTiler Static Map API](https://docs.maptiler.com/cloud/api/static-maps/).\n * The URL of static maps can then be used within a `<img />` markup element, as the `src` property value.\n */\nconst staticMaps = {\n  centered,\n  bounded,\n  automatic,\n};\n\nexport { staticMaps };\n","export const earthRadius = 6371008.8;\n\n/** Convert meters to feet */\nexport function mToFt(m: number): number {\n  return m * 3.28084;\n}\n\n/** Convert degrees to Radians */\nexport function degToRad(degrees: number): number {\n  return ((degrees % 360) * Math.PI) / 180;\n}\n\n/** Convert radians to degrees */\nexport function radToDeg(radians: number): number {\n  return (radians * 180) / Math.PI;\n}\n\n/** Given a latitude and zoom level, determine the max distance each segment can be in meters */\nexport function getZoomLevelResolution(\n  latitude: number,\n  zoom: number,\n  tileSize = 512\n): number {\n  return (\n    ((Math.cos((latitude * Math.PI) / 180.0) * 2 * Math.PI * 6378137) /\n      (tileSize * 2 ** zoom)) *\n    3\n  );\n}\n\n/** Convert a tile's zoom-x-y to a number hash */\nexport function xyzToTileID(x: number, y: number, zoom: number): number {\n  return ((1 << zoom) * y + x) * 32 + zoom;\n}\n","// ripped from https://github.com/Turfjs/turf/blob/master/packages/turf-area/index.ts\nimport { degToRad, earthRadius } from \"./util\";\n\n/**\n * Finds the area of a Polygon or MultiPolygon in square meters.\n */\nexport function area(\n  area:\n    | GeoJSON.Feature<GeoJSON.Polygon | GeoJSON.MultiPolygon>\n    | GeoJSON.Polygon\n    | GeoJSON.MultiPolygon\n) {\n  const geometry = \"geometry\" in area ? area.geometry : area;\n  const type = geometry.type;\n  if (type === \"MultiPolygon\") {\n    return multiPolygonArea(geometry.coordinates);\n  }\n  return polygonArea(geometry.coordinates);\n}\n\n/**\n * Finds the area of a MultiPolygon in square meters.\n */\nexport function multiPolygonArea(\n  multiPoly: GeoJSON.MultiPolygon | GeoJSON.Position[][][]\n): number {\n  const coords = \"coordinates\" in multiPoly ? multiPoly.coordinates : multiPoly;\n  let total = 0;\n  for (const polygon of coords) {\n    total += polygonArea(polygon);\n  }\n  return total;\n}\n\n/**\n * Finds the area of a Polygon in square meters.\n */\nexport function polygonArea(\n  poly: GeoJSON.Polygon | GeoJSON.Position[][]\n): number {\n  const coords = \"coordinates\" in poly ? poly.coordinates : poly;\n  let total = 0;\n  for (const ring of coords) {\n    total += ringArea(ring);\n  }\n  return total;\n}\n\n/**\n * Calculate the approximate area of the polygon were it projected onto the earth.\n * Note that this area will be positive if ring is oriented clockwise, otherwise it will be negative.\n *\n * Reference:\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for Polygons on a Sphere\",\n * JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007 https://trs.jpl.nasa.gov/handle/2014/40409\n */\nfunction ringArea(coords: GeoJSON.Position[]): number {\n  let p1;\n  let p2;\n  let p3;\n  let lowerIndex;\n  let middleIndex;\n  let upperIndex;\n  let i;\n  let total = 0;\n  const coordsLength = coords.length;\n\n  if (coordsLength > 2) {\n    for (i = 0; i < coordsLength; i++) {\n      if (i === coordsLength - 2) {\n        // i = N-2\n        lowerIndex = coordsLength - 2;\n        middleIndex = coordsLength - 1;\n        upperIndex = 0;\n      } else if (i === coordsLength - 1) {\n        // i = N-1\n        lowerIndex = coordsLength - 1;\n        middleIndex = 0;\n        upperIndex = 1;\n      } else {\n        // i = 0 to N-3\n        lowerIndex = i;\n        middleIndex = i + 1;\n        upperIndex = i + 2;\n      }\n      p1 = coords[lowerIndex];\n      p2 = coords[middleIndex];\n      p3 = coords[upperIndex];\n      total += (degToRad(p3[0]) - degToRad(p1[0])) * Math.sin(degToRad(p2[1]));\n    }\n\n    total = (total * earthRadius * earthRadius) / 2;\n  }\n  return Math.abs(total);\n}\n","import { earthRadius, degToRad } from \"./util\";\n\n/** Get the distance of a LineString in meters */\nexport function lineDistance(\n  line:\n    | GeoJSON.Feature<GeoJSON.LineString>\n    | GeoJSON.LineString\n    | GeoJSON.Position[]\n) {\n  // grab the coordinates\n  const coordinates =\n    \"geometry\" in line\n      ? line.geometry.coordinates\n      : \"coordinates\" in line\n      ? line.coordinates\n      : line;\n  // iterate through the coordinates and calculate the distance\n  let distance = 0;\n  let prevCoord: GeoJSON.Position | undefined;\n  for (const coordinate of coordinates) {\n    if (prevCoord !== undefined) {\n      distance += pointDistance(prevCoord, coordinate);\n    }\n    prevCoord = coordinate;\n  }\n\n  return distance;\n}\n\n/** Get the distance between two lon-lat pairs in meters */\nexport function pointDistance(\n  from: GeoJSON.Position,\n  to: GeoJSON.Position\n): number {\n  const { pow, sin, cos, sqrt, atan2 } = Math;\n  const dLat = degToRad(to[1] - from[1]);\n  const dLon = degToRad(to[0] - from[0]);\n  const lat1 = degToRad(from[1]);\n  const lat2 = degToRad(to[1]);\n\n  const a =\n    pow(sin(dLat / 2), 2) + pow(sin(dLon / 2), 2) * cos(lat1) * cos(lat2);\n\n  return 2 * atan2(sqrt(a), sqrt(1 - a)) * earthRadius;\n}\n","import { llToTile } from \"web-merc-projection\";\nimport {\n  pointDistance,\n  getZoomLevelResolution,\n  xyzToTileID,\n} from \"../geometry\";\n\nimport type { Point } from \"web-merc-projection\";\n\nexport interface TileID {\n  id: number;\n  x: number;\n  y: number;\n  z: number;\n}\n\nexport interface TileCoverCoordinates {\n  /** Store the coordinates as an ll-pair */\n  coordinate: Point;\n  /** Track the tile relative to the point */\n  tile: TileID;\n}\n\nexport interface TileCoverOutput {\n  coords: TileCoverCoordinates[];\n  tiles: TileID[];\n}\n\n/**\n * Given LineString coordinates, return the web mercator tiles that all the points contain.\n * Breaks the coordinates down into points that are relative to the zoom.\n */\nexport default function tileCover(\n  coordinates: GeoJSON.Position[],\n  zoom: number,\n  tileSize: number\n): TileCoverOutput {\n  const tileHash = new Map<number, TileID>(); // tileHash => { id, x, y, z }\n  const tiles: TileID[] = [];\n  const coords: TileCoverCoordinates[] = [];\n\n  // get the resolution of the zoom level\n  const resolution = getZoomLevelResolution(coordinates[0][1], zoom, tileSize);\n\n  // migrate from coordinates to \"samples\" that are relative to the zoom\n  const samples = sampleProfileLine(coordinates, resolution);\n\n  for (const sample of samples) {\n    const coordinate = sample as unknown as [lon: number, lat: number];\n    // file the file that the coordinate is in\n    const [tileX, tileY] = llToTile(coordinate, zoom, tileSize);\n    // create the tile and store it\n    const id = xyzToTileID(tileX, tileY, zoom);\n    const tile: TileID = { id, x: tileX, y: tileY, z: zoom };\n    tileHash.set(id, tile);\n    // store the coordinates\n    coords.push({ coordinate, tile });\n  }\n  // store the tiles we've found\n  for (const tile of tileHash.values()) tiles.push(tile);\n\n  return { coords, tiles };\n}\n\n/** convert coordinates to samples that have a max distance of the zoom level resolution */\nfunction sampleProfileLine(\n  coordinates: GeoJSON.Position[],\n  resolution: number\n): GeoJSON.Position[] {\n  const samples: GeoJSON.Position[] = [];\n\n  let prevCoord: GeoJSON.Position | undefined;\n  for (const coord of coordinates) {\n    if (prevCoord !== undefined) {\n      const dist = pointDistance(\n        prevCoord as unknown as [lon: number, lat: number],\n        coord as unknown as [lon: number, lat: number]\n      );\n      const numSamples = Math.ceil(dist / resolution);\n\n      for (let i = 0; i <= numSamples - 1; i++) {\n        const sample = [\n          prevCoord[0] + (coord[0] - prevCoord[0]) * (i / numSamples),\n          prevCoord[1] + (coord[1] - prevCoord[1]) * (i / numSamples),\n        ];\n        samples.push(sample);\n      }\n    } else {\n      samples.push(coord);\n    }\n\n    prevCoord = coord;\n  }\n\n  return samples;\n}\n","import { llToTilePx } from \"web-merc-projection\";\n\nimport type { TileImage } from \"./\";\n\nexport type ElevationParser = (\n  r: number,\n  g: number,\n  b: number,\n  a: number\n) => number;\n\n/** Given an RGB or RBGA image and lon-lat coordinate, determine the elevation */\nexport default function getElevation(\n  coord: [lon: number, lat: number],\n  tile: [zoom: number, x: number, y: number],\n  tileSize: number,\n  tileImage: TileImage,\n  elevationParser: ElevationParser = defaultElevationParser\n): number {\n  const { channels, image } = tileImage;\n  let [x, y] = llToTilePx(coord, tile, tileSize);\n  x = clampPixel(x, tileSize);\n  y = clampPixel(y, tileSize);\n  const index = (y * tileSize + x) * channels;\n\n  return elevationParser(\n    image[index],\n    image[index + 1],\n    image[index + 2],\n    channels === 4 ? image[index + 3] : 0\n  );\n}\n\n/** Clamp the pixels to the 0-tileSize bounds */\nfunction clampPixel(n: number, tileSize: number): number {\n  return Math.max(0, Math.min(tileSize, Math.floor(n * tileSize)));\n}\n\n/** Default elevation parser used by Mapbox and Maplibre. Result is in meters */\nexport function defaultElevationParser(\n  r: number,\n  g: number,\n  b: number\n): number {\n  return -10000 + (r * 256 * 256 + g * 256 + b) * 0.1;\n}\n","import tileCover from \"./tileCover\";\nimport getElevation from \"./getElevation\";\nimport { pointDistance, mToFt } from \"../geometry\";\n\nimport type { TileCoverCoordinates, TileID } from \"./tileCover\";\nimport type { ElevationParser } from \"./getElevation\";\nimport type { Feature, LineString } from \"geojson\";\n\nexport * from \"./getElevation\";\nexport * from \"./tileCover\";\n\nexport interface TileImage {\n  channels: 1 | 2 | 3 | 4;\n  image: Uint8ClampedArray;\n}\n\nexport type TileRequest = (\n  x: number,\n  y: number,\n  zoom: number\n) => Promise<TileImage>;\n\nexport interface Options {\n  /** type of metric to use. Meters or feet. Default: meters */\n  metric?: \"m\" | \"ft\";\n  /** Zoom that is queried from the server. Default: 13 */\n  zoom?: number;\n  /** Tile size of the images returned. Default 512 */\n  tileSize?: number;\n  /** Tile Request method */\n  tileRequest: TileRequest;\n  /** Elevation parser. Default: elevation = -10000 + ((R * 256 * 256 + G * 256 + B) * 0.1) */\n  elevationParser?: ElevationParser;\n  /** smooth out the elevation to make the visual aesthetic nicer */\n  smooth?: boolean;\n}\n\nexport interface ElevPoint {\n  /** Distance along path from the starting point in the metric defind by options */\n  distance: number;\n  /** Elevation of the point */\n  elevation: number;\n  /** Coordinates of the point in lat-lon */\n  coordinate: [lon: number, lat: number];\n  /** Tile that the point is in */\n  tile: TileID;\n}\n\nexport interface Output {\n  /** Total length of the path in the metric defined by options */\n  distance: number;\n  /** Minimum elevation of the path */\n  minElevation: number;\n  /** Maximum elevation of the path */\n  maxElevation: number;\n  /** Average elevation of the path */\n  avgElevation: number;\n  /** Elevation at the start of the path */\n  startElevation: number;\n  /** Elevation at the end of the path */\n  endElevation: number;\n  /** Array of points along the path */\n  points: ElevPoint[];\n}\n\n/**\n * Given a GeoJSON LineString or Feature<Linestring>, return the elevation data for the path.\n * This algorithm will automatically break the path into denser segments relative to the zoom level if necessary.\n */\nexport async function profileLineString(\n  path: Feature<LineString> | LineString,\n  options: Options\n): Promise<Output> {\n  // get the tile cover\n  const coordinates =\n    \"geometry\" in path ? path.geometry.coordinates : path.coordinates;\n  const { coords, tiles } = tileCover(\n    coordinates,\n    options.zoom ?? 13,\n    options.tileSize ?? 512\n  );\n  // get tiles\n  const tileCache = await getTiles(tiles, options.tileRequest);\n  // get the elevation data\n  let points = getElevations(\n    coords,\n    tileCache,\n    options.tileSize ?? 512,\n    options.elevationParser\n  );\n  // smooth the elevation data if needed\n  if (options.smooth === true) points = smoothElevation(points);\n  // calculate the output\n  let output = buildOutput(points);\n  // convert to miles if needed\n  if (options.metric === \"ft\") output = toFeet(output);\n\n  return output;\n}\n\n/** Request all the tiles we need */\nasync function getTiles(\n  tiles: TileID[],\n  tileRequest: TileRequest\n): Promise<Map<number, TileImage>> {\n  const tileCache = new Map<number, TileImage>();\n\n  // request all the tiles we need\n  const requests: Array<Promise<TileImage | undefined>> = [];\n  for (const tile of tiles) {\n    requests.push(\n      tileRequest(tile.x, tile.y, tile.z)\n        .then((res: TileImage): TileImage => {\n          tileCache.set(tile.id, res);\n          return res;\n        })\n        .catch((err: unknown) => {\n          console.error(err);\n          return undefined;\n        })\n    );\n  }\n  // wait for all the requests to finish\n  await Promise.allSettled(requests);\n\n  return tileCache;\n}\n\n/** Get the elevation data for each coordinate */\nfunction getElevations(\n  coords: TileCoverCoordinates[],\n  tileCache: Map<number, TileImage>,\n  tileSize: number,\n  elevationParser?: ElevationParser\n): ElevPoint[] {\n  const points: ElevPoint[] = [];\n\n  // get the elevation data for each coordinate\n  let curDistance = 0;\n  let prevCoord: [lon: number, lat: number] | undefined;\n  for (const { tile, coordinate } of coords) {\n    const cTile = tileCache.get(tile.id);\n    if (cTile === undefined)\n      throw new Error(\n        `Missing tile ${tile.id} (${tile.x}-${tile.y}-${tile.z})`\n      );\n    const elevation = getElevation(\n      coordinate,\n      [tile.z, tile.x, tile.y],\n      tileSize,\n      cTile,\n      elevationParser\n    );\n    points.push({\n      distance: curDistance,\n      elevation,\n      coordinate,\n      tile,\n    });\n    // calculate the distance between the points\n    if (prevCoord !== undefined) {\n      curDistance += pointDistance(prevCoord, coordinate);\n    }\n    prevCoord = coordinate;\n  }\n\n  return points;\n}\n\n/** Improve the output to include metrics about the max/min/avg elevation */\nfunction buildOutput(points: ElevPoint[]): Output {\n  // setup variables\n  let minElevation = Infinity;\n  let maxElevation = -Infinity;\n  let totalElevation = 0;\n  // calcuate min, max, and average\n  for (const point of points) {\n    if (point.elevation < minElevation) minElevation = point.elevation;\n    if (point.elevation > maxElevation) maxElevation = point.elevation;\n    totalElevation += point.elevation;\n  }\n\n  return {\n    distance: points[points.length - 1].distance,\n    minElevation,\n    maxElevation,\n    avgElevation: totalElevation / points.length,\n    startElevation: points[0].elevation,\n    endElevation: points[points.length - 1].elevation,\n    points,\n  };\n}\n\n/**\n * Smooth function to make the elevation appear more aesthetically\n * pleaseing without changing the values greatly\n */\nfunction smoothElevation(points: ElevPoint[]): ElevPoint[] {\n  const newPoints: ElevPoint[] = [];\n  let prevPoint: ElevPoint | undefined;\n  for (let i = 0; i < points.length; i++) {\n    const point = points[i];\n    const nextPoint = points[i + 1] ?? points[i];\n    if (prevPoint === undefined) {\n      newPoints.push(point);\n    } else {\n      const newPoint: ElevPoint = {\n        distance: point.distance,\n        elevation:\n          (prevPoint.elevation + point.elevation + nextPoint.elevation) / 3,\n        coordinate: point.coordinate,\n        tile: point.tile,\n      };\n      newPoints.push(newPoint);\n    }\n    prevPoint = point;\n  }\n\n  return newPoints;\n}\n\n/** Convert all output properties from km to miles */\nfunction toFeet(input: Output): Output {\n  const output: Output = {\n    distance: mToFt(input.distance),\n    minElevation: mToFt(input.minElevation),\n    maxElevation: mToFt(input.maxElevation),\n    avgElevation: mToFt(input.avgElevation),\n    startElevation: mToFt(input.startElevation),\n    endElevation: mToFt(input.endElevation),\n    points: input.points.map(({ distance, elevation, coordinate, tile }) => ({\n      distance: mToFt(distance),\n      elevation: mToFt(elevation),\n      coordinate,\n      tile,\n    })),\n  };\n\n  return output;\n}\n"],"names":["__publicField","__async","customMessages","area"],"mappings":"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"}